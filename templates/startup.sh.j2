#!/bin/bash

# This is needed for Docker compose to have a unified alias for the main container.
# Modifying /etc/hosts can only happen during runtime not during build-time
echo "127.0.0.1      galaxy" >> /etc/hosts

# Set number of Galaxy handlers via GALAXY_HANDLER_NUMPROCS or default to 2
ansible localhost -m ini_file -a "dest=/etc/supervisor/conf.d/galaxy.conf section=program:handler option=numprocs value=${GALAXY_HANDLER_NUMPROCS:-2}"

cd {{ galaxy_server_dir }}
. {{ galaxy_venv_dir }}/bin/activate
{% if supervisor_manage_docker|bool %}
umount /var/lib/docker
{% endif %}

{% if startup_export_user_files is defined and startup_export_user_files %}
# If /export/ is mounted, export_user_files file moving all data to /export/
# symlinks will point from the original location to the new path under /export/
# If /export/ is not given, nothing will happen in that step
python /usr/local/bin/export_user_files.py $PG_DATA_DIR_DEFAULT
{% endif %}

# Enable Test Tool Shed
if [ "x$ENABLE_TTS_INSTALL" != "x" ]
    then
        echo "Enable installation from the Test Tool Shed."
        export GALAXY_CONFIG_TOOL_SHEDS_CONFIG_FILE=$GALAXY_HOME/tool_sheds_conf.xml
fi

# Remove all default tools from Galaxy by default
if [ "x$BARE" != "x" ]
    then
        echo "Remove all tools from the tool_conf.xml file."
        export GALAXY_CONFIG_TOOL_CONFIG_FILE=config/shed_tool_conf.xml,$GALAXY_ROOT/test/functional/tools/upload_tool_conf.xml
fi

# Backward compatibility for exported postgresql directories before version 15.08.
# In previous versions postgres has the UID/GID of 102/106. We changed this in 
# https://github.com/bgruening/docker-galaxy-stable/pull/71 to GALAXY_POSTGRES_UID=1550 and
# GALAXY_POSTGRES_GID=1550
if [ -e /export/postgresql/ ];
    then
        if [ `stat -c %g /export/postgresql/` == "106" ];
            then
                chown -R postgres:postgres /export/postgresql/
        fi
fi


{% if galaxy_extras_config_condor %}
if [ "x$ENABLE_CONDOR" != "x" ]
then
    echo "Enabling Condor"
    if [ -e /export/condor_config ]
    then
        rm -f /etc/condor/condor_config
        ln -s /export/condor_config /etc/condor/condor_config
    fi
fi
{% endif %}


{% if startup_chown_on_directory is defined and startup_chown_on_directory %}
if [ -e {{ startup_chown_on_directory }}  ];
then
    old_uid=`stat -c '%u' "{{ galaxy_home_dir }}"`
    old_gid=`stat -c '%g' "{{ galaxy_home_dir }}"`
    old_perms="$old_uid:$old_gid"

    source_uid=`stat -c '%u' "{{ startup_chown_on_directory }}"`
    source_gid=`stat -c '%g' "{{ startup_chown_on_directory }}"`
    source_perms="$source_uid:$source_gid"

    deluser {{ galaxy_user_name }}
    groupadd -r {{ galaxy_user_name }} -g $source_gid
    useradd -u $source_uid -r -g {{ galaxy_user_name }} -d "{{ galaxy_home_dir }}" -c "Galaxy User" {{ galaxy_user_name }} -s /bin/bash
    echo {{ galaxy_user_name }} | passwd {{ galaxy_user_name }} --stdin

    for target_path in /opt /home /tmp/slurm;
    do
        chown --from=$old_perms -R $source_perms $target_path
    done
fi
{% endif %}

{% if supervisor_manage_slurm|bool %}
# Copy or link the slurm/munge config files
if [ -e /export/slurm.conf ]
then
    rm -f /etc/slurm-llnl/slurm.conf
    ln -s /export/slurm.conf /etc/slurm-llnl/slurm.conf
else
    # Configure SLURM with runtime hostname.
    # Use absolute path to python so virtualenv is not used.
    /usr/bin/python /usr/sbin/configure_slurm.py
fi

if [ -e /export/munge.key ]
then
    rm -f /etc/munge/munge.key
    ln -s /export/munge.key /etc/munge/munge.key
    chmod 400 /export/munge.key
fi
{% endif %}
# $NONUSE can be set to include proftp, reports or nodejs
# if included we will _not_ start these services.
function start_supervisor {
    supervisord -c /etc/supervisor/supervisord.conf
    sleep 5
    {% if supervisor_manage_proftp %}
    if [[ $NONUSE != *"proftp"* ]]
    then
        echo "Starting ProFTP"
        supervisorctl start proftpd
    fi
    {% endif %}
    {% if supervisor_manage_reports %}
    if [[ $NONUSE != *"reports"* ]]
    then
        echo "Starting Galaxy reports webapp"
        supervisorctl start reports
    fi
    {% endif %}
    {% if supervisor_manage_ie_proxy %}
    if [[ $NONUSE != *"nodejs"* ]]
    then
        echo "Starting nodejs"
        supervisorctl start galaxy:galaxy_nodejs_proxy
    fi
    {% endif %}


    {% if supervisor_manage_slurm %}
        if [[ $NONUSE != *"slurmctld"* ]]
        then
            echo "Starting slurmctld"
            supervisorctl start slurmctld
        fi
        if [[ $NONUSE != *"slurmd"* ]]
        then
            echo "Starting slurmd"
            supervisorctl start slurmd
        fi
        supervisorctl start munge

    {% else %}
        if [[ $NONUSE != *"slurmctld"* ]]
        then
            echo "Starting slurmctld"
            /usr/sbin/slurmctld -L {{ slurm_log_dir }}/slurmctld.log
        fi
        if [[ $NONUSE != *"slurmd"* ]]
        then
            echo "Starting slurmd"
            /usr/sbin/slurmd -L {{ slurm_log_dir }}/slurmd.log
        fi

        # We need to run munged regardless
        mkdir -p /var/run/munge && /usr/sbin/munged -f

    {% endif %}
}


# Try to guess if we are running under --privileged mode
if mount | grep "/proc/kcore"; then
    echo "Disable Galaxy Interactive Environments. Start with --privileged to enable IE's."
    export GALAXY_CONFIG_INTERACTIVE_ENVIRONMENT_PLUGINS_DIRECTORY=""
    start_supervisor
else
    echo "Enable Galaxy Interactive Environments."
    export GALAXY_CONFIG_INTERACTIVE_ENVIRONMENT_PLUGINS_DIRECTORY="config/plugins/interactive_environments"
    if [ x$DOCKER_PARENT == "x" ]; then 
        #build the docker in docker environment
        bash /root/cgroupfs_mount.sh
        start_supervisor
        supervisorctl start docker
    else
        #inheriting /var/run/docker.sock from parent, assume that you need to
        #run docker with sudo to validate
        echo "{{ galaxy_user_name }} ALL = NOPASSWD : ALL" >> /etc/sudoers
        start_supervisor
    fi
fi

# Enable verbose output
if [ `echo ${GALAXY_LOGGING:-'no'} | tr [:upper:] [:lower:]` = "full" ]
    then
        tail -f /var/log/supervisor/* /var/log/nginx/* {{ galaxy_log_dir }}/*.log
    else
        tail -f {{ galaxy_log_dir }}/*.log
fi

# Disable authentication of Galaxy reports
if [ "x$DISABLE_REPORTS_AUTH" != "x" ]
    then
        # disable authentification by deleting the htpasswd file
        echo "Disable Galaxy reports authentification "
        rm /etc/nginx/htpasswd
fi


